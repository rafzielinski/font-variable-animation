{"mappings":"AA0DA;;;;;;;AAQA;;;;;AA6BA;;;;;;;;AAYY;;;;;AAhCR;;;;;;;;;;;;;;AAuCQ;;;;;AAvCR;;;;;;;;;;AA8CQ;;;;;AA9CR;;;;;;;;;;AC1EJ;;;;AAMA;;;;AASA;;;;;;;;;;;AAaA;;;;;;AAWA;;;;;AAQA;;;;;;;;AChDA;;;;;AAEA;EACE;;;;;;;EAOA;;;;;;;;;;;EAWA;;;;;;EAMA;;;;;;;;;;EAaA","sources":["assets/styles.scss","node_modules/splitting/dist/splitting.css","node_modules/splitting/dist/splitting-cells.css"],"sourcesContent":["// @keyframes vars {\n//     0% {\n//        font-variation-settings: \"MONO\" 0, \"CASL\" 1, \"CRSV\" 0, \"wght\" 1000, \"slnt\" 0;\n//     }\n      \n//     25% {\n//      font-variation-settings: \"MONO\" 0, \"CASL\" 0, \"CRSV\" 0, \"wght\" 600, \"slnt\" 0;\n//     } \n    \n//    50% {\n//       font-variation-settings: \"MONO\" 0, \"CASL\" 1, \"CRSV\" 0, \"wght\" 600, \"slnt\" -15;\n//     } \n    \n//     75% {\n//       font-variation-settings: \"MONO\" 0, \"CASL\" 0, \"CRSV\" 1, \"wght\" 300, \"slnt\" -10;\n//     } \n    \n//     100% {\n//       font-variation-settings: \"MONO\" 0, \"CASL\" 1, \"CRSV\" 0, \"wght\" 1000, \"slnt\" 0;\n//     }\n//   }\n  \n  \n//   @font-face {\n//     font-family: 'Recursive VF';\n//     font-style: oblique -15deg 0deg; \n//     font-weight: 300 1000;\n//     font-display: swap;\n//     src: url('https://s3-us-west-2.amazonaws.com/s.cdpn.io/13034/Recursive_VF_1.043--subset_range_english_basic.woff2') format('woff2');\n//   }\n  \n//   :root {\n//     --dur:10s;\n//   }\n  \n//   div {\n//     font-size: 3rem;\n//     font-variation-settings: \"MONO\" 0, \"CASL\" 0, \"CRSV\" 0, \"wght\" 1000, \"slnt\" 0;\n//       background: -webkit-linear-gradient(#FF29BF, #7100FF);\n//     -webkit-background-clip: text;\n//     -webkit-text-fill-color: transparent;\n//     color: #B000FF; \n//     // will-change:font-variation-settings;\n    \n//     animation: vars var(--dur) infinite linear both;\n//   }\n  \n  \n  \n  \n//   body {\n//     display:flex;\n//     justify-content: center;\n//     align-items: center;\n//     height:100vh;\n//     width: 100vw;\n//   }\n\n@font-face {\n    font-family: \"RobotoFlex\";\n    src: url(\"./fonts/robotoFlex.ttf\") format(\"truetype-variations\");\n    font-weight: 100 1000;\n    /* font-stretch: 75% 125%; */\n    font-style: normal;\n}\n\nbody {\nfont-family: 'RobotoFlex', serif;\nfont-size: 16px;\n\n}\n\n@mixin animate-font-variants($constant: '', $keyframes: (), $animation: '') {\n    $name: #{'anim-' + random(99999)};\n\n    @keyframes #{$name} {\n        $length: length($keyframes);\n        $perc: 100 / ($length - 1);\n\n        @for $i from 1 through $length {\n            $step: nth($keyframes, $i);\n\n            @if (type-of($step) == 'string') {\n                #{unquote($perc * ($i - 1) + \"%\")} {font-variation-settings: unquote($constant) + ', ' + unquote($step);}\n            } @else {\n                #{unquote(nth($step, 1))} {font-variation-settings: unquote($constant) + ', ' + unquote(nth($step, 2));}\n            }\n        }\n    };\n\n    font-variation-settings: unquote($constant) + ', ' + unquote(nth($keyframes, 1));\n\n    animation: $name unquote($animation);\n}\n\n.anim {\n--text-wght: 375;\n--text-wdth: 100;\n--text-opsz: 16;\n--text-GRAD: 88;\n\nfont-size: 15rem;\n// font-variation-settings: 'wght' var(--text-wght), 'wdth' var(--text-wdth), 'opsz' var(--text-opsz), 'GRAD' var(--text-GRAD);\n// font-variation-settings: 'wght' 100;\n\n    .word {\n        .char {\n            &:nth-child(1) {\n                @include animate-font-variants(\n                $constant: \"'wght' 200\", \n                $keyframes: (\"'wdth' 25\", (\"40%\", \"'wdth' 100\"), \"'wdth' 50\"), \n                $animation: '5s infinite linear alternate both');\n            }\n\n            &:nth-child(2) {\n                @include animate-font-variants(\n                $constant: \"'wdth' 25\", \n                $keyframes: (\"'wght' 100\", \"'wght' 1000\"), \n                $animation: '5s infinite linear alternate both');\n            }\n            \n            &:nth-child(3) {\n                @include animate-font-variants(\n                $constant: \"'wdth' 40\",  \n                $keyframes: (\"'wght' 100, 'slnt' 0\", \"'wght' 600, 'slnt' -10\"), \n                $animation: '5s infinite linear alternate both');\n            }\n\n            // animation-delay: calc(1s * var(--char-index));\n        }\n    }\n}","/* Recommended styles for Splitting */\n.splitting .word,\n.splitting .char {\n  display: inline-block;\n}\n\n/* Psuedo-element chars */\n.splitting .char {\n  position: relative;\n}\n\n/**\n * Populate the psuedo elements with the character to allow for expanded effects\n * Set to `display: none` by default; just add `display: block` when you want\n * to use the psuedo elements\n */\n.splitting .char::before,\n.splitting .char::after {\n  content: attr(data-char);\n  position: absolute;\n  top: 0;\n  left: 0;\n  visibility: hidden;\n  transition: inherit;\n  user-select: none;\n}\n\n/* Expanded CSS Variables */\n\n.splitting {\n  /* The center word index */\n  --word-center: calc((var(--word-total) - 1) / 2);\n\n  /* The center character index */\n  --char-center: calc((var(--char-total) - 1) / 2);\n\n  /* The center character index */\n  --line-center: calc((var(--line-total) - 1) / 2);\n}\n\n.splitting .word {\n  /* Pecent (0-1) of the word's position */\n  --word-percent: calc(var(--word-index) / var(--word-total));\n\n  /* Pecent (0-1) of the line's position */\n  --line-percent: calc(var(--line-index) / var(--line-total));\n}\n\n.splitting .char {\n  /* Percent (0-1) of the char's position */\n  --char-percent: calc(var(--char-index) / var(--char-total));\n\n  /* Offset from center, positive & negative */\n  --char-offset: calc(var(--char-index) - var(--char-center));\n\n  /* Absolute distance from center, only positive */\n  --distance: calc(\n     (var(--char-offset) * var(--char-offset)) / var(--char-center)\n  );\n\n  /* Distance from center where -1 is the far left, 0 is center, 1 is far right */\n  --distance-sine: calc(var(--char-offset) / var(--char-center));\n\n  /* Distance from center where 1 is far left/far right, 0 is center */\n  --distance-percent: calc((var(--distance) / var(--char-center)));\n}\n",".splitting.cells img { width: 100%; display: block; }\n\n@supports ( display: grid ) {\n  .splitting.cells {\n    position: relative;\n    overflow: hidden;\n    background-size: cover;\n    visibility: hidden;\n  }\n\n  .splitting .cell-grid {\n    background: inherit;\n    position: absolute;\n    top: 0; \n    left: 0; \n    width: 100%; \n    height: 100%;\n    display: grid;\n    grid-template: repeat( var(--row-total), 1fr ) / repeat( var(--col-total), 1fr );\n  }\n\n  .splitting .cell {\n    background: inherit;\n    position: relative;\n    overflow: hidden;\n  }\n\n  .splitting .cell-inner {\n    background: inherit;\n    position: absolute;\n    visibility: visible;\n    /* Size to fit the whole container size */\n    width: calc(100% * var(--col-total));\n    height: calc(100% * var(--row-total));\n    /* Position properly */\n    left: calc(-100% * var(--col-index));\n    top: calc(-100% * var(--row-index));\n  }\n\n  /* Helper variables for advanced effects */\n  .splitting .cell {\n    --center-x: calc((var(--col-total) - 1) / 2);\n    --center-y: calc((var(--row-total) - 1) / 2);\n\n    /* Offset from center, positive & negative */\n    --offset-x: calc(var(--col-index) - var(--center-x));\n    --offset-y: calc(var(--row-index) - var(--center-y));\n\n    /* Absolute distance from center, only positive */\n    --distance-x: calc( (var(--offset-x) * var(--offset-x)) / var(--center-x) );\n\n    /* Absolute distance from center, only positive */\n    --distance-y: calc( (var(--offset-y) * var(--offset-y)) / var(--center-y) );\n  }\n}\n\n"],"names":[],"version":3,"file":"index.a2cc9e2a.css.map","sourceRoot":"/__parcel_source_root/"}